{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Assignment issues",
  "type": "Assignment can be replaced with operator assignment",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "<code>out[i] = (char) (out[i] >> key.charAt(random.nextInt(key.length())) % 8)</code> could be simplified to 'out[i] >>= key.charAt(random.nextInt(key.length())) % 8'",
  "detailsInfo": "Reports assignment operations which can be replaced by operator-assignment.\n\nCode using operator assignment is shorter and may be clearer.\n\n**Example:**\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied:\n\n      x += 3;\n      x /= 3;\n\n\nUse the **Ignore conditional operators** option to ignore `&&`\nand `||`. Replacing conditional operators with operator\nassignment would change the evaluation from lazy to eager, which may change the semantics of the expression.\n\n\nUse the **Ignore obscure operators** option to ignore `^` and `%`, which are less known.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/java/me/lyzev/cryption/LyCryption.java",
      "language": "JAVA",
      "line": 57,
      "offset": 12,
      "length": 72,
      "code": {
        "startLine": 55,
        "length": 72,
        "offset": 244,
        "surroundingCode": "        Random random = new Random(key.toString().hashCode()); // Creates an instance of Random with the hashcode of the key as the seed\n        for (int i = 0; i < out.length; i++) // Loops thorugh every char of the provided input\n            out[i] = (char) (out[i] >> key.charAt(random.nextInt(key.length())) % 8); // Shifts the char value\n        return new String(out); // Creates a string with the char array\n    }"
      }
    }
  ],
  "attributes": {
    "module": "LyCryption",
    "inspectionName": "ReplaceAssignmentWithOperatorAssignment"
  },
  "hash": "6247765388776179600"
},{
  "tool": "Code Inspection",
  "category": "Assignment issues",
  "type": "Assignment can be replaced with operator assignment",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "<code>out[i] = (char) (out[i] << key.charAt(random.nextInt(key.length())) % 8)</code> could be simplified to 'out[i] <<= key.charAt(random.nextInt(key.length())) % 8'",
  "detailsInfo": "Reports assignment operations which can be replaced by operator-assignment.\n\nCode using operator assignment is shorter and may be clearer.\n\n**Example:**\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied:\n\n      x += 3;\n      x /= 3;\n\n\nUse the **Ignore conditional operators** option to ignore `&&`\nand `||`. Replacing conditional operators with operator\nassignment would change the evaluation from lazy to eager, which may change the semantics of the expression.\n\n\nUse the **Ignore obscure operators** option to ignore `^` and `%`, which are less known.",
  "sources": [
    {
      "type": "method",
      "path": "src/main/java/me/lyzev/cryption/LyCryption.java",
      "language": "JAVA",
      "line": 43,
      "offset": 12,
      "length": 72,
      "code": {
        "startLine": 41,
        "length": 72,
        "offset": 244,
        "surroundingCode": "        Random random = new Random(key.toString().hashCode()); // Creates an instance of Random with the hashcode of the key as the seed\n        for (int i = 0; i < out.length; i++) // Loops thorugh every char of the provided input\n            out[i] = (char) (out[i] << key.charAt(random.nextInt(key.length())) % 8); // Shifts the char value\n        return Base64.getEncoder().encodeToString(new String(out).getBytes(StandardCharsets.UTF_8)); // Creates a string with the char array and encodes it with Base64\n    }"
      }
    }
  ],
  "attributes": {
    "module": "LyCryption",
    "inspectionName": "ReplaceAssignmentWithOperatorAssignment"
  },
  "hash": "2881953804485751346"
}]}